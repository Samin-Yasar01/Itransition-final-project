@model FormsApp.Features.Forms.Models.Form
@using FormsApp.Features.Social.Services
@using System.Security.Claims
@inject ISocialService SocialService

@{
    ViewData["Title"] = "View Response";
    var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>@Model.Template.Title</h2>
        @*<a asp-action="Index" class="btn btn-outline-secondary">Back to List</a>*@
    </div>

    <div class="card mb-4">
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Submitted by:</dt>
                <dd class="col-sm-9">@Model.User.FirstName @Model.User.LastName</dd>

                <dt class="col-sm-3">Email:</dt>
                <dd class="col-sm-9">@Model.User.Email</dd>

                <dt class="col-sm-3">Submission Date:</dt>
                <dd class="col-sm-9">@Model.UpdatedAt.ToLocalTime().ToString("f")</dd>

                <dt class="col-sm-3">Template Owner:</dt>
                <dd class="col-sm-9">@Model.Template.User.FirstName @Model.Template.User.LastName</dd>
            </dl>
        </div>
    </div>

    <div class="mt-4">
        <h4>Answers</h4>
        @if (Model.QuestionSnapshots?.Any() == true)
        {
            @foreach (var question in Model.QuestionSnapshots.OrderBy(q => q.Order))
            {
                var answer = Model.Answers?.FirstOrDefault(a => a.QuestionId == question.OriginalQuestionId);
                var answerValue = answer?.Value;

                <div class="card mb-3" id="answer-@answer?.Id">
                    <div class="card-body">
                        <h5 class="card-title">@question.Title</h5>
                        @if (!string.IsNullOrEmpty(question.Description))
                        {
                            <p class="card-subtitle text-muted mb-2">@question.Description</p>
                        }
                        <div class="card-text">
                            @switch (question.Type)
                            {
                                case "Checkbox":
                                    <span class="badge bg-@(answerValue?.ToLower() == "true" ? "success" : "secondary")">
                                        @(answerValue?.ToLower() == "true" ? "Confirmed" : "Not Confirmed")
                                    </span>
                                    break;
                                case "Text":
                                case "Multiline":
                                case "Number":
                                    if (!string.IsNullOrEmpty(answerValue))
                                    {
                                        <p class="mb-0">@answerValue</p>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No answer provided</span>
                                    }
                                    break;
                                default:
                                    <span class="text-muted">No answer provided</span>
                                    break;
                            }
                        </div>

                        <!-- Social interactions section -->
                        <div class="mt-3 border-top pt-2">
                            <div class="d-flex justify-content-between align-items-center">
                                <!-- Like button -->
                                <div>
                                    <button class="btn btn-sm btn-outline-primary like-button"
                                            data-answer-id="@answer?.Id">
                                        <i class="far fa-thumbs-up"></i>
                                        <span class="like-count">0</span>
                                    </button>
                                </div>

                                <!-- Comment toggle -->
                                <button class="btn btn-sm btn-outline-secondary toggle-comments"
                                        data-answer-id="@answer?.Id">
                                    <i class="far fa-comment"></i> Comments
                                </button>
                            </div>

                            <!-- Comments section (initially hidden) -->
                            <div class="comments-section mt-2" id="comments-@answer?.Id" style="display: none;">
                                <div class="comments-list mb-2">
                                    <!-- Comments will be loaded here -->
                                </div>

                                <!-- Add comment form -->
                                <form class="add-comment-form" data-answer-id="@answer?.Id">
                                    <div class="input-group">
                                        <input type="text" class="form-control form-control-sm"
                                               placeholder="Add a comment..." required>
                                        <button class="btn btn-sm btn-primary" type="submit">Post</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="alert alert-warning">No questions found for this form.</div>
        }
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize SignalR connection
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/commentsHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // Start the connection
            connection.start().catch(err => console.error(err.toString()));

            // Toggle comments visibility
            $('.toggle-comments').click(function() {
                const answerId = $(this).data('answer-id');
                $(`#comments-${answerId}`).toggle();
                loadComments(answerId);
            });

            // Handle like button click
            $('.like-button').click(function() {
                const answerId = $(this).data('answer-id');
                toggleLike(answerId);
            });

            // Handle comment submission
            $('.add-comment-form').submit(function(e) {
                e.preventDefault();
                const answerId = $(this).data('answer-id');
                const content = $(this).find('input').val().trim();

                if (content) {
                    addComment(answerId, content);
                    $(this).find('input').val('');
                }
            });

            // Function to load comments for an answer
            function loadComments(answerId) {
                $.get(`/Social/GetComments?answerId=${answerId}`, function(comments) {
                    const commentsList = $(`#comments-${answerId} .comments-list`);
                    commentsList.empty();

                    if (comments.length === 0) {
                        commentsList.append('<p class="text-muted">No comments yet.</p>');
                        return;
                    }

                    comments.forEach(comment => {
                        commentsList.append(`
                            <div class="card mb-2">
                                <div class="card-body p-2">
                                    <div class="d-flex justify-content-between">
                                        <strong>${comment.userName}</strong>
                                        <small class="text-muted">${new Date(comment.createdAt).toLocaleString()}</small>
                                    </div>
                                    <p class="mb-0">${comment.content}</p>
                                </div>
                            </div>
                        `);
                    });
                });
            }

            // Function to toggle like
            function toggleLike(answerId) {
                $.post(`/Social/ToggleLikeAnswer?answerId=${answerId}`, function(response) {
                    const likeButton = $(`.like-button[data-answer-id="${answerId}"]`);
                    const likeCount = likeButton.find('.like-count');

                    likeCount.text(response.likeCount);
                    if (response.hasLiked) {
                        likeButton.removeClass('btn-outline-primary').addClass('btn-primary');
                    } else {
                        likeButton.removeClass('btn-primary').addClass('btn-outline-primary');
                    }
                });
            }

            // Function to add a comment
            function addComment(answerId, content) {
                $.post(`/Social/AddCommentToAnswer`, {
                    answerId: answerId,
                    content: content
                }, function(comment) {
                    loadComments(answerId);

                    // Notify other users via SignalR
                    connection.invoke("SendComment",
                        comment.userName,
                        comment.content,
                        answerId);
                });
            }

            // Receive new comments via SignalR
            connection.on("ReceiveComment", (user, comment, answerId) => {
                if ($(`#comments-${answerId}`).is(':visible')) {
                    loadComments(answerId);
                }
            });

            // Initial load of like counts
            $('.like-button').each(function() {
                const answerId = $(this).data('answer-id');
                $.get(`/Social/GetLikeCount?answerId=${answerId}`, function(count) {
                    $(this).find('.like-count').text(count);
                }.bind(this));

                $.get(`/Social/HasLikedAnswer?answerId=${answerId}`, function(hasLiked) {
                    if (hasLiked) {
                        $(this).removeClass('btn-outline-primary').addClass('btn-primary');
                    }
                }.bind(this));
            });
        });
    </script>
}