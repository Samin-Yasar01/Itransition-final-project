@model FormsApp.Features.Forms.Models.Form

@{
    ViewData["Title"] = "Fill Out Form";
}

<div class="container">
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2>@Model.Template.Title</h2>
            <p class="text-muted">@Model.Template.Description</p>
        </div>
        @if (Model.IsSubmitted)
        {
            <span class="badge bg-success">Submitted</span>
        }
    </div>
    <hr />

    <form asp-action="Edit" method="post">
        <input type="hidden" asp-for="Id" />

        @for (var i = 0; i < Model.QuestionSnapshots.Count; i++)
        {
            var question = Model.QuestionSnapshots.OrderBy(q => q.Order).ElementAt(i);
            var answer = Model.Answers.FirstOrDefault(a => a.QuestionId == question.OriginalQuestionId);
            var answerValue = answer?.Value ?? string.Empty;

            <div class="form-group mb-4">
                <label class="form-label">@question.Title</label>
                @if (!string.IsNullOrEmpty(question.Description))
                {
                    <small class="text-muted d-block">@question.Description</small>
                }

                <input type="hidden" name="Answers[@i].QuestionId" value="@question.OriginalQuestionId" />

                @switch (question.Type)
                {
                    case "Text":
                        <input type="text"
                               name="Answers[@i].Value"
                               value="@answerValue"
                               class="form-control"
                               required="@(!question.AllowEmpty)" />
                        break;
                    case "Multiline":
                        <textarea name="Answers[@i].Value"
                                  class="form-control"
                                  rows="3"
                                  required="@(!question.AllowEmpty)">@answerValue</textarea>
                        break;
                    case "Number":
                        <input type="number"
                               name="Answers[@i].Value"
                               value="@answerValue"
                               class="form-control"
                               min="0"
                               required="@(!question.AllowEmpty)" />
                        break;
                    case "Checkbox":
                        <div class="form-check">
                            <input type="hidden" name="Answers[@i].Value" value="false" />
                            <input type="checkbox"
                                   name="Answers[@i].Value"
                                   value="true"
                                   class="form-check-input"
                            @(answerValue.ToLower() == "true" ? "checked" : "") />
                            <label class="form-check-label">Check to confirm</label>
                        </div>
                        break;
                }

                <span asp-validation-for="Answers" class="text-danger"></span>
            </div>
        }

        <div class="form-group mt-4">
            <button type="submit" name="action" value="submit" class="btn btn-primary">@(Model.IsSubmitted ? "Update Submission" : "Submit Form")</button>
            <a asp-action="Index" class="btn btn-outline-secondary">Cancel</a>
        </div>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
} 